Phase,Phase Name,Core Question,Key Activities,Expected Outputs,Guiding Prompts
0,Context Framing & Constraint Playbook,Why are we solving this and within what limits?,"Clarify desired outcome; Identify constraints (time, tech, data); Define success metrics; Draft a north-star hypothesis; Write a short playbook defining PoC scope (timebox, tooling, allowed assumptions)","Problem statement; Constraint playbook; Success criteria; Hypothesis","What is the desired change or proof? What are the boundaries and success signals for this PoC?"
1,Decomposition & Instruction Distillation,What are the atomic elements and minimal instructions?,"Break problem into sub-problems; Identify entities, events, and relationships; Map inputs → processes → outputs; Distill these into the smallest accurate, implementation-agnostic instructions; Tag unknowns as experiments","Concept map; Domain model; Minimal instruction set; List of unknowns","What is the simplest accurate description of this system without implementation detail?"
2,Ideation & Concept Design,How might we solve it?,"Brainstorm candidate architectures and flows; Sketch user/system/data diagrams; Explore analogies and references; Score feasibility and novelty","Candidate solutions; Architecture sketches; Pros/cons matrix; Draft steel-thread candidates","What are 2–3 viable solution patterns? What assumptions or tradeoffs define each?"
3,Refinement & Steel Thread Definition,What’s the smallest viable end-to-end slice?,"Evaluate ideas via risk–learning or cost–impact matrix; Define the steel thread; Identify key decision points (CLI vs REST, DB type, dependencies); Draft high-level sequence diagram across major components; Define success tests and validation criteria","Chosen steel thread; Decision matrix; Sequence diagram; Validation plan","What minimal flow can prove the concept across all architectural layers?"
4,Roadmapping & Epic Definition,How does this connect to deliverables and dependencies?,"Translate steel thread into epics and tasks; Identify dependency relationships (logical/technical); Order tasks in finish-to-start relationships; Build initial roadmap","Epic breakdown; Dependency matrix; Sequenced roadmap","How do components depend on each other? What must finish before the next can start?"
5,Implementation Planning & Executable Specs,How will we build and validate cleanly?,"Select frameworks, libraries, and adapters; Define interface boundaries; Write YAML use-case specs (executable/testable); Build task-level checklists; Break tasks into code/design/docs with estimated hours; Plan environment setup and test data","Technical decision log; YAML use-case specs; Validation checklists; Work-type breakdown; Repo skeleton","What stack fits constraints? What is the smallest build that can satisfy each YAML spec and checklist?"
6,Execution & Iteration,Can it work in reality?,"Build incrementally following steel thread; Run validation tests; Capture learnings, blockers, and performance notes; Iterate or pivot","Working PoC; Test results; Learning log","What’s working? What needs refinement or redesign?"
7,Reflection & Knowledge Capture,What did we learn and what’s reusable?,"Document retrospectives; Extract reusable YAML specs, diagrams, and boilerplates; Update framework templates; Decide go/no-go for productionization","Retrospective doc; Reusable artifact library; Productionization recommendation","What should be standardized or reused? What would we change next time?"
